{"version":3,"sources":["components/routing/HeaderMenu.js","apis/dexie.js","images/background.jpeg","components/routing/Welcome.js","components/routing/AuthRoute.js","images/logo.png","components/home/CardTemplate.js","components/home/GatherCard.js","images/googleTakeout1.gif","images/googleTakeout2.gif","util/tokenize.js","actions/index.js","components/gather/GatherGoogleTakeout.js","components/home/GatherCardColumn.js","components/home/ExploreCard.js","components/home/ExploreCardColumn.js","components/home/DataSquare.js","util/intersect.js","components/explore/dashboards/dashboardParts/ColoredBackgroundGrid.js","components/explore/dashboards/dashboardParts/DataList.js","components/explore/dashboards/dashboardParts/QueryInput.js","components/explore/dashboards/dashboardParts/Statistics.js","components/explore/dashboards/dashboardParts/BubbleChartSpec.js","components/explore/dashboards/dashboardParts/BubbleChart.js","components/explore/dashboards/HistoryDashboard.js","components/explore/BrowsingHistory.js","components/explore/YoutubeHistory.js","components/explore/SearchHistory.js","components/explore/dashboards/dashboardParts/TimeLine.js","util/createColors.js","components/explore/dashboards/fun/FunFacts.js","components/explore/dashboards/GoodiesDashboard.js","components/explore/GoodiesView.js","App.js","reducers/index.js","index.js"],"names":["withRouter","items","children","location","useLocation","menuItems","map","item","index","Menu","Item","as","Link","to","path","header","disabled","active","pathname","label","Sidebar","Pushable","inverted","animation","visible","direction","size","Pusher","db","this","idb","Dexie","version","stores","meta","browsinghistory","youtube","searchhistory","datastatus","a","isWelcome","add","welcome","get","table","offset","limit","rows","count","n","toArray","ids","length","where","anyOf","delete","selection","browserdata","getTableFromIds","stats","DataFrame","withColumn","row","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getDay","sortBy","fields","query","key","any","regex","RegExp","replace","toCollection","collection","each","field","push","id","test","primaryKeys","from","start","end","between","reverse","name","equals","modify","status","data","bulkPut","then","lastKey","console","log","catch","BulkError","e","failures","Welcome","history","useHistory","beWelcomed","checkWelcome","useEffect","Grid","textAlign","style","height","backgroundImage","background","backgroundSize","verticalAlign","Column","maxWidth","Segment","border","Header","align","Button","primary","onClick","AuthRoute","Component","componentProps","useState","loading","setLoading","hasdb","setHasdb","connect","render","props","CardTemplate","subname","icon","Card","centered","cursor","width","marginLeft","marginRight","Dimmer","Loader","Content","Icon","float","content","Meta","Description","GatherCard","color","statusMessage","STOPWORDS_LOOKUP","reduce","obj","sw","tokenize","text","split","filter","token","toLowerCase","setDataStatus","dataStatus","type","updateDataStatus","dispatch","getState","newDataStatus","i","findIndex","WriteToDB","setOpen","useDispatch","ref","useRef","onChangeHandler","failed","newZip","JSZip","fileblob","target","files","loadAsync","zipped","file","async","chrome","JSON","parse","writeChromeHistory","parseYoutubeHtml","writeYoutubeHistory","current","click","hidden","onChange","accept","string","nodes","DOMParser","parseFromString","querySelector","querySelectorAll","node","aList","subtitles","textContent","url","attributes","href","titleUrl","title","br","datestring","nextSibling","time","toISOString","urls","queries","URL","hostname","trim","words","word","convertTimestamp","time_usec","platform","domain","page_transition","addData","d","channel","channel_url","Math","round","GatherGoogleTakeout","open","Modal","onClose","onOpen","trigger","rel","stackable","Container","List","ordered","marginTop","marginBottom","padding","src","gt1","alt","gt2","Actions","GoogleTakeout","GatherCardColumn","lastUpdated","oldTime","currentTime","slice","ExploreCard","useSelector","state","find","Browsing","Search","Youtube","ExploreCardColumn","useLiveQuery","headerStyle","fontSize","paddingBottom","paddingTop","columnStyle","cardGroupStyle","DataSquare","logo","divided","Group","anyDone","arrays","cursors","allEqual","allMax","max","intersect","array","Array","fill","res","ColoredBackgroundGrid","zIndex","top","bottom","right","left","position","overflow","DataList","layout","setData","setN","selectionN","setSelectionN","ask","itemIds","confirm","setConfirm","fetchFromDb","onBottomVisible","newdata","getTableBatch","createItem","Table","Cell","overflowY","Visibility","continuous","striped","fixed","Row","HeaderCell","charAt","toUpperCase","Body","ConfirmModal","setAsk","handleDelete","deleteTableIds","backgroundColor","ButtonGroup","fluid","Checkbox","value","pageSize","getTableN","React","memo","QueryInput","searchOn","setSelection","search","setSearch","selectionStatus","setSelectionStatus","timer","setTimeout","searchSelection","clearTimeout","Input","getSelectionQuery","Statistics","loadingData","setLoadingData","borderRadius","margin","total_visits","max_domain","mean","num_domains","getDataFrame","group","groupBy","counts","aggregate","rename","statistics","stat","getRow","createClassFromSpec","spec","BubbleChart","inSelection","nWords","setOutSelection","Set","setKeys","tree","selectedDatum","setSelectedDatum","prepareData","signalListeners","signal","datum","popupStyle","x","y","BubbleChartSpec","actions","Image","floated","basic","extra","className","keyTotalObj","t","entry","keys","isArray","join","undefined","parent","keyTotal","Object","values","gridStyle","HistoryDashboard","cloudKey","querySelection","setQuerySelection","keyInSelection","setKeyInSelection","keyOutSelection","setKeyOutSelection","setTimeInSelection","timeOutSelection","display","columns","paddingLeft","paddingRight","boxShadow","SEARCHON","LAYOUT","BrowsingHistory","YoutubeHistory","SearchHistory","COLORS","color1","color2","color3","heatmap","Rainbow","setSpectrum","setNumberRange","colors","colourAt","createColors","ZEROCOLOR","LEGENDS","anchor","translateY","itemCount","itemWidth","itemHeight","itemsSpacing","itemDirection","MARGIN","THEME","textColor","TimeLine","days","setDays","dayRange","setDayRange","day","ignore","getSelectionRange","getSelection","formatDate","secondary","min","emptyColor","some","yearSpacing","monthSpacing","monthBorderColor","dayBorderWidth","dayBorderColor","legends","onContextMenu","midnightMorning","setHours","midnightEvening","theme","dayTotalObj","weekday","dateOrdered","orderBy","first","minDate","last","maxDate","setDate","dayTotal","addZ","facts","dayCount","m","mostBusyDay","dayName","toLocaleDateString","timeGroup","minTime","maxTime","avgmintime","avgmaxtime","toLocaleTimeString","hour","minute","mostVisits","mV","mostVisitsDayName","year","month","maxDiff","d1","DateTime","fromJSDate","diffInDays","diff","mid_time","floor","FunFacts","most_active_day","typical_start","typical_end","most_visits_day","most_visits_in_1_day","most_days_between_visits","middle_point","GoodiesDashboard","timeInSelection","setTimeOutSelection","fontStyle","App","exact","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document"],"mappings":"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","file":"static/js/main.b50bfdde.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu, Sidebar } from \"semantic-ui-react\";\nimport { Link, withRouter, useLocation } from \"react-router-dom\";\n\nconst HeaderMenu = ({ items, children }) => {\n  // This header menu is super sneaky.\n  // It's actually not meant to be seen.\n  // But it's nice to be able to turn it on (set visible to true) when developing\n  // (and it now handles the routing)\n\n  const location = useLocation();\n\n  const menuItems = items.map((item, index) => {\n    return (\n      <Menu.Item\n        key={\"item-\" + index}\n        index={index}\n        as={Link}\n        to={item.path}\n        header={index === 0}\n        disabled={false}\n        active={item.path === location.pathname}\n      >\n        {item.label}\n      </Menu.Item>\n    );\n  });\n\n  return (\n    <Sidebar.Pushable>\n      <Sidebar as={Menu} inverted animation=\"push\" visible={false} direction={\"top\"} size=\"mini\">\n        {menuItems}\n      </Sidebar>\n      <Sidebar.Pusher>{children}</Sidebar.Pusher>\n    </Sidebar.Pushable>\n  );\n};\n\nexport default withRouter(HeaderMenu);\n","import { DataFrame } from \"dataframe-js\";\nimport Dexie from \"dexie\";\n//import hash from \"object-hash\";\n\n/**\n * Creates an instance of AnnotationDB, which is just a dexie db with some bells and whistles.\n */\nclass AnnotationDB {\n  constructor() {\n    // Dexie automatically checks whether a db with this name exists. If it does,\n    // it opens the existing one, if it doesn't, it creates a new one.\n    this.idb = new Dexie(\"DataDonationsLab\"); // idb = indexedDB\n\n    // the following 2 lines are only for developing\n    // if enabled (i.e. not commented), the db resets every time the app is started (also when refreshing)\n    // this.idb.delete();\n    // this.idb = new Dexie(\"DataDonationsLab\");\n\n    this.idb.version(2).stores({\n      meta: \"welcome\", // this just serves to keep track of whether db was 'created' via the welcome component. Eventually, this would be a good place to add authentication / token validation\n      browsinghistory: \"id++, &[url+date], [domain+date], domain, date\", // id++ auto increments ; &[url+date] is unique compound key\n      youtube: \"id++, &[url+date], channel, date\",\n      searchhistory: \"id++, &[query+date], *word, date\", // *word is a multientry index that takes an array of words\n      datastatus: \"name\", // names should be the name of a table (browsinghistory, youtube, etc.). Used to keep track of status\n    });\n  }\n\n  // META\n  /** just serves to indicate that user has accepted conditions at welcome screen */\n  async welcome() {\n    if (!(await this.isWelcome())) this.idb.meta.add({ welcome: 1 });\n    return null;\n  }\n  async isWelcome() {\n    return this.idb.meta.get(1);\n  }\n\n  // ANY TABLE DATA\n  async getTableBatch(table, offset, limit) {\n    if (offset !== null && offset < 0) return null;\n    let rows = await this.idb.table(table);\n    const n = await rows.count();\n    if (offset !== null && offset > n - 1) return null;\n    if (limit !== null) rows = rows.offset(offset).limit(limit);\n    return rows.toArray();\n  }\n\n  async getTableFromIds(table, ids) {\n    if (ids.length === 0) return [];\n    return await this.idb.table(table).where(\"id\").anyOf(ids).toArray();\n  }\n\n  async getTableN(table) {\n    let rows = await this.idb.table(table);\n    return rows.count();\n  }\n\n  async deleteTableIds(table, ids) {\n    if (ids.length === 0) return [];\n    await this.idb.table(table).where(\"id\").anyOf(ids).delete();\n  }\n\n  async getDataFrame(selection) {\n    let browserdata = [];\n\n    if (selection !== null) {\n      browserdata = await db.getTableFromIds(\"browsinghistory\", selection);\n    } else {\n      browserdata = await this.idb.table(\"browsinghistory\").toArray();\n    }\n\n    let stats = new DataFrame(browserdata);\n    stats = stats.withColumn('dateOnly', (row) => {\n      const date = row.get(\"date\");\n      return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    });\n    stats = stats.withColumn('time', (row) => {\n      const date = row.get(\"date\");\n      return new Date(0,0,0,date.getHours(), date.getMinutes(), 0);\n    });\n    stats = stats.withColumn(\"day\", (row) => (row.get(\"date\").getDay()));\n    stats = stats.sortBy(\"date\");\n\n    return stats;\n  }\n\n  /**\n   * text search data in table\n   * @param {string} table  Name of a table\n   * @param {array} fields  Names of the fields to search\n   * @param {string} query  A string to search for\n   * @param {string} key    Optionally, filter on an indexed 'key' before performing the fulltext search.\n   * @param {array} any     If key is used, any should be an array of values\n   * @returns\n   */\n  async getSelectionQuery(table, fields, query, key, any) {\n    // table: what table to search\n    // fields: what columns to search\n    // query: direct text match\n    // key, any: optionally, filter on an indexed key, where any is an array of values\n    let regex = null;\n    if (query !== \"\") regex = new RegExp(query.replace(/[-/\\\\^$*+?.()|[\\]{}]/, \"\\\\$&\"), \"i\");\n    let rows = await this.idb.table(table);\n\n    let selection = [];\n    let collection = any == null ? await rows.toCollection() : await rows.where(key).anyOf(any);\n\n    await collection.each((row) => {\n      for (let field of fields) {\n        if (regex === null) {\n          selection.push(row.id);\n          return;\n        }\n        if (regex.test(row[field])) {\n          selection.push(row.id);\n          return;\n        }\n      }\n    });\n    return selection;\n  }\n\n  async getSelectionAny(table, key, any) {\n    let rows = await this.idb.table(table);\n    return await rows.where(key).anyOf(any).primaryKeys();\n  }\n\n  async getSelectionRange(table, key, from, to) {\n    let rows = await this.idb.table(table);\n\n    const start = from || new Date(1000, 1, 1);\n    const end = to || new Date(3000, 1, 1);\n\n    return await rows.where(key).between(start, end, true, true).reverse().primaryKeys();\n  }\n\n  // DATA STATUS\n  async dataStatus(name) {\n    return this.idb.datastatus.get(name);\n  }\n\n  async updateDataStatus(name) {\n    // note that status is always set to finished.\n    // whenever the datastatus table is updated, it its written to the dataStatus state (redux)\n    // This way the 'loading' status can be triggered via dispatch, and is set to finished when the update is finished\n    const current = await this.idb.datastatus.get(name);\n    if (current) {\n      this.idb.datastatus\n        .where(\"name\")\n        .equals(name)\n        .modify({ date: new Date(), status: \"finished\" });\n    } else {\n      this.idb.datastatus.add({ name, date: new Date(), status: \"finished\" });\n    }\n  }\n\n  async addData(data, table) {\n    // The unique compound index &[url+date] ensures no duplicates\n    // Dexie will throw an error for this, but apparently you can catch it\n    // and then dexie will continue uploading the other items\n    // (https://dexie.org/docs/Table/Table.bulkPut())\n    this.idb\n      .table(table)\n      .bulkPut(data)\n      .then((lastKey) => {\n        console.log(\"uploaded all data items\");\n      })\n      .catch(Dexie.BulkError, (e) => {\n        console.log(`Failed to upload ${e.failures.length} data items`);\n      });\n  }\n}\n\nconst db = new AnnotationDB();\nexport default db;\n","export default __webpack_public_path__ + \"static/media/background.eb5e36bf.jpeg\";","import React, { useEffect } from \"react\";\n\nimport db from \"apis/dexie\";\nimport { useHistory } from \"react-router-dom\";\nimport { Grid, Button, Header, Segment } from \"semantic-ui-react\";\nimport background from \"images/background.jpeg\";\n\n/**\n * This component only appears the first time users visit,\n * or if they are away so long that the indexedDB has been cleaned.\n * In time, this page should clearly list the terms and conditions.\n */\nconst Welcome = ({ items }) => {\n  const history = useHistory();\n\n  const beWelcomed = async (checkWelcome) => {\n    if (checkWelcome) {\n      const iswelcome = await db.isWelcome();\n      if (!iswelcome) return null;\n    }\n    try {\n      await db.welcome();\n      history.push(items[0].path);\n    } catch (e) {}\n  };\n\n  useEffect(() => {\n    beWelcomed(true);\n  });\n\n  return (\n    <Grid\n      inverted\n      textAlign=\"center\"\n      style={{\n        height: \"100vh\",\n        backgroundImage: `url(${background})`,\n        backgroundSize: \"100% 100%\",\n      }}\n      verticalAlign=\"middle\"\n    >\n      <Grid.Column style={{ maxWidth: 600 }}>\n        <Segment style={{ border: 0 }}>\n          <Header as=\"h2\">Welcome to the Digital Footprints Lab!</Header>\n          <p align=\"justified\">\n            This application let's you collect and explore your own digital traces. All the data is\n            stored and processed on your own device, and cannot be seen by anyone, so that you are\n            free to contemplate your life choices in solitude.\n          </p>\n          <p align=\"justified\">\n            We do, however, kindly ask you to anonymously donate some parts of this data for\n            scientific research. Specifically, we are interested in how you seek, consume and share\n            news articles. The data will be used for non-commercial research by a select group of\n            researchers at Dutch Universities.\n          </p>\n          <Button primary onClick={() => beWelcomed(false)}>\n            Great, let's get started!\n          </Button>\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default Welcome;\n","import React, { useState } from \"react\";\nimport { Route, Redirect } from \"react-router\";\nimport db from \"apis/dexie\";\n\n/**\n * Handles authentication (which at the moment is just accepting the welcome message)\n * Redirects to the welcome pages if the condition in connect is not met.\n */\nconst AuthRoute = ({ Component, ...componentProps }) => {\n  const [loading, setLoading] = useState(true);\n  const [hasdb, setHasdb] = useState(false);\n  // the weird trick for passing on componentProps is basically\n  // redundant with Redux, but leaving it intact just in case\n\n  const connect = async () => {\n    if (await db.isWelcome()) {\n      setHasdb(true);\n    } else {\n      setHasdb(false);\n    }\n    setLoading(false);\n  };\n\n  connect();\n\n  return (\n    <Route\n      {...componentProps}\n      render={(props) =>\n        loading ? (\n          <div>loading...</div>\n        ) : hasdb ? (\n          <Component {...componentProps} {...props} />\n        ) : (\n          <Redirect to={\"/\"} />\n        )\n      }\n    />\n  );\n};\n\nexport default AuthRoute;\n","export default __webpack_public_path__ + \"static/media/logo.fc0d5b24.png\";","import React from \"react\";\nimport { Card, Dimmer, Icon, Loader } from \"semantic-ui-react\";\n\nconst CardTemplate = ({ children, name, subname, icon, onClick, loading }) => {\n  return (\n    <Card\n      centered\n      style={{\n        cursor: \"pointer\",\n        width: \"100%\",\n        marginLeft: \"2em\",\n        marginRight: \"2em\",\n        background: \"#ffffff00\",\n      }}\n      onClick={onClick}\n    >\n      <Dimmer active={loading === \"loading\"}>\n        <Loader />\n      </Dimmer>\n      <Card.Content style={{ background: \"#ffffff\" }}>\n        <Icon size=\"huge\" name={icon} style={{ float: \"right\" }} />\n        <Card.Header content={name} />\n        <Card.Meta content={subname} />\n\n        <Card.Description>{children}</Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default CardTemplate;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Icon } from \"semantic-ui-react\";\nimport CardTemplate from \"./CardTemplate\";\n\nconst propTypes = {\n  /** The name of the platform from which to gather the data */\n  name: PropTypes.string.isRequired,\n  /** A subname, for extra info */\n  subname: PropTypes.string.isRequired,\n  /** The name of an Icon from semantic ui, see https://semantic-ui.com/elements/icon.html  */\n  icon: PropTypes.string.isRequired,\n  /** Event handler for clicks. Not strictly necessary, because the card can also be used as a trigger (as in GatherGoogleTakeout) */\n  onClick: PropTypes.func,\n  /** String indicating loading status */\n  loading: PropTypes.string.isRequired,\n};\n\n/**\n * The template for generating GatherCards.\n * These are the cards in the Gather column on the home page.\n */\nconst GatherCard = ({ name, subname, icon, onClick, loading }) => {\n  const statusMessage = (loading) => {\n    if (loading === \"failed\")\n      return (\n        <>\n          <Icon name=\"close\" color=\"red\" />\n          <i>Something went wrong :(</i>\n        </>\n      );\n    if (loading === \"finished\")\n      return (\n        <>\n          <Icon name=\"checkmark\" color=\"green\" />\n          <i>Data succesfully imported</i>\n        </>\n      );\n    return <i>Click here to gather data</i>;\n  };\n\n  return (\n    <CardTemplate name={name} subname={subname} icon={icon} onClick={onClick} loading={loading}>\n      {statusMessage(loading)}\n    </CardTemplate>\n  );\n};\n\nGatherCard.propTypes = propTypes;\nexport default GatherCard;\n","export default __webpack_public_path__ + \"static/media/googleTakeout1.d43cb755.gif\";","export default __webpack_public_path__ + \"static/media/googleTakeout2.97152dfa.gif\";","const STOPWORDS = [\"and\", \"or\", \"not\", \"the\", \"it\"]; // etc\nconst STOPWORDS_LOOKUP = STOPWORDS.reduce((obj, sw) => {\n  obj[sw] = true;\n  return obj;\n}, {});\n\n/**\n * Quick and dirty word tokenization, with very basic stopword filtering\n * Probably should replace this with a proper lightweight NLP package\n * @param {string} text The text to tokenize\n * @returns An array of the (filtered) tokens\n */\nconst tokenize = (text) => {\n  return text.split(/\\W+/).filter((token) => {\n    token = token.toLowerCase();\n    if (token.length <= 1) return false; // also drop single chars and empty\n    if (STOPWORDS_LOOKUP[token]) return false;\n    return true;\n  });\n};\n\nexport default tokenize;\n","export const setDataStatus = (dataStatus) => {\n  return {\n    type: \"SET_DATA_STATUS\",\n    dataStatus,\n  };\n};\n\nexport const updateDataStatus = (name, status) => {\n  return (dispatch, getState) => {\n    const { dataStatus } = getState();\n    const newDataStatus = [...dataStatus];\n    const i = newDataStatus.findIndex((data) => data.name === name);\n    if (i < 0) {\n      newDataStatus.push({ name, date: null, status: status });\n    } else {\n      newDataStatus[i] = { ...newDataStatus[i], status: status };\n    }\n    dispatch(setDataStatus(newDataStatus));\n  };\n};\n","import React, { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Button, Container, Grid, Header, List, Modal, Segment } from \"semantic-ui-react\";\nimport gt1 from \"images/googleTakeout1.gif\";\nimport gt2 from \"images/googleTakeout2.gif\";\nimport db from \"apis/dexie\";\nimport tokenize from \"util/tokenize\";\n\nimport JSZip from \"jszip\";\nimport { useDispatch } from \"react-redux\";\nimport { updateDataStatus } from \"actions\";\n\n// This script handles everything related to importing Google Takeout data\n// It should serve as an example for implementing other platforms\n// (and could probably do with a makeover)\n\nconst propTypes = {\n  /** A <GatherCard/>, which then serves as the trigger for the modal when clicked on */\n  children: PropTypes.element,\n  /** callback function for setting the loading status */\n  setLoading: PropTypes.func,\n};\n\n/**\n * The modal that opens when the Google Takeout Gather card is clicked.\n */\nconst GatherGoogleTakeout = ({ children, setLoading }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={children}\n    >\n      <Modal.Header>Google Takeout</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <p>\n            As you can imagine, Google has a lot of data about many people, and probably about you\n            as well. A lesser known fact is that the data is still yours, and Google is legally\n            required to give you access to it. You can obtain this data via{\" \"}\n            <a href=\"https://takeout.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              Google Takeout.\n            </a>{\" \"}\n          </p>\n          <br />\n\n          <Grid stackable>\n            <Grid.Column width={16}>\n              <Container>\n                <Header>How do I order takeout from Google?</Header>\n\n                <List ordered>\n                  <List.Item>\n                    First, open the{\" \"}\n                    <a href=\"https://takeout.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                      Google Takeout\n                    </a>{\" \"}\n                    website (the link opens in a new tab or window).\n                  </List.Item>\n                  <List.Item>\n                    Find the list under <b>Create a new export</b>. Unselect everything, and then\n                    only select <b>Chrome</b> and <b>Youtube</b>\n                  </List.Item>\n\n                  <List.Item>\n                    For Youtube we also filter out some content. Click on{\" \"}\n                    <b>All Youtube data included</b>, and make sure to select only <b>History</b>.\n                    Then click on <b>Multiple formats</b> and for <b>History</b> change <b>HTML</b>{\" \"}\n                    to <b>JSON</b>\n                  </List.Item>\n                  <Grid stackable style={{ marginTop: \"1em\", marginBottom: \"1em\" }}>\n                    <Grid.Column width={8}>\n                      <Header textAlign=\"center\">Step 2</Header>\n                      <Segment style={{ padding: 0 }}>\n                        <img width=\"100%\" src={gt1} alt=\"loading...\" />\n                      </Segment>\n                    </Grid.Column>\n                    <Grid.Column width={8}>\n                      <Header textAlign=\"center\">Step 3</Header>\n                      <Segment style={{ padding: 0 }}>\n                        <img width=\"100%\" src={gt2} alt=\"loading...\" />\n                      </Segment>\n                    </Grid.Column>\n                  </Grid>\n                  <List.Item>\n                    Finally, click <b>Next step</b>. Here you can click <b>Create export</b> (the\n                    default settings are good). If you followed the selection steps, this will only\n                    be a few megabytes, and Google will send you the download link in a few minutes.\n                    This link will give you a <b>zip</b> file, that you can upload here:\n                  </List.Item>\n                </List>\n                <br />\n                <WriteToDB setOpen={setOpen} setLoading={setLoading} />\n              </Container>\n            </Grid.Column>\n          </Grid>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button onClick={() => setOpen(false)}>Cancel</Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nconst WriteToDB = ({ setOpen, setLoading }) => {\n  const dispatch = useDispatch();\n  const ref = useRef();\n\n  const onChangeHandler = async (e) => {\n    dispatch(updateDataStatus(\"browsinghistory\", \"loading\"));\n    dispatch(updateDataStatus(\"searchhistory\", \"loading\"));\n    dispatch(updateDataStatus(\"youtube\", \"loading\"));\n\n    let failed = false;\n    try {\n      setLoading(\"loading\");\n      setOpen(false);\n      let newZip = new JSZip();\n      let fileblob = e.target.files[0];\n\n      const zipped = await newZip.loadAsync(fileblob);\n\n      try {\n        let chrome = await zipped.file(\"Takeout/Chrome/BrowserHistory.json\").async(\"text\");\n        chrome = JSON.parse(chrome);\n        writeChromeHistory(chrome[\"Browser History\"]);\n      } catch (e) {\n        failed = true;\n        dispatch(updateDataStatus(\"searchhistory\", \"failed\"));\n        dispatch(updateDataStatus(\"browsinghistory\", \"failed\"));\n      }\n\n      try {\n        let youtube;\n        const isJSON = zipped.file(\"Takeout/YouTube and YouTube Music/history/watch-history.json\");\n        if (isJSON) {\n          youtube = await zipped\n            .file(\"Takeout/YouTube and YouTube Music/history/watch-history.json\")\n            .async(\"text\");\n          youtube = JSON.parse(youtube);\n        } else {\n          youtube = await zipped\n            .file(\"Takeout/YouTube and YouTube Music/history/watch-history.html\")\n            .async(\"text\");\n          youtube = parseYoutubeHtml(youtube);\n        }\n        writeYoutubeHistory(youtube);\n      } catch (e) {\n        console.log(e);\n        failed = true;\n        dispatch(updateDataStatus(\"youtube\", \"failed\"));\n      }\n    } catch (e) {\n      setLoading(\"failed\");\n    }\n    setLoading(failed ? \"failed\" : \"finished\");\n  };\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Button primary onClick={() => ref.current.click()}>\n        Import Google Takeout\n      </Button>\n      <input\n        ref={ref}\n        type=\"file\"\n        name=\"file\"\n        hidden\n        onChange={onChangeHandler}\n        accept=\"application/zip\"\n      />\n    </div>\n  );\n};\n\nconst parseYoutubeHtml = (string) => {\n  const doc = new DOMParser().parseFromString(string, \"text/html\");\n  const nodes = doc.querySelector(\".mdl-grid\").querySelectorAll(\".mdl-grid\");\n\n  const items = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const aList = node.querySelectorAll(\"a\");\n\n    const item = {};\n    if (aList.length === 2) {\n      item.subtitles = { name: aList[1].textContent, url: aList[1].attributes.href.textContent };\n    }\n    item.titleUrl = aList[0].attributes.href.textContent;\n    item.title = aList[0].textContent;\n\n    const br = node.children[1].querySelectorAll(\"br\");\n    const datestring = br[br.length - 1].nextSibling.textContent;\n    const date = new Date(Date.parse(datestring.replace(\"CEST\", \"GMT+0200\")));\n    item.time = date.toISOString();\n    items.push(item);\n  }\n  return items;\n};\n\nconst writeChromeHistory = async (history) => {\n  let urls = [];\n  let queries = [];\n\n  for (let item of history) {\n    let url = new URL(item.url);\n    if (url.hostname + url.pathname === \"www.google.com/search\") {\n      const query = item.title.replace(\"- Google Search\", \"\").trim();\n      let words = tokenize(query);\n      queries.push({\n        query: query,\n        word: words,\n        date: convertTimestamp(item.time_usec),\n        platform: \"Chrome\",\n      });\n      continue;\n    }\n\n    urls.push({\n      url: item.url,\n      title: item.title,\n      domain: url.hostname,\n      platform: \"Chrome\",\n      date: convertTimestamp(item.time_usec),\n      page_transition: item.page_transition,\n    });\n  }\n\n  await db.addData(queries, \"searchhistory\");\n  await db.addData(urls, \"browsinghistory\");\n  await db.updateDataStatus(\"browsinghistory\", \"finished\");\n  await db.updateDataStatus(\"searchhistory\", \"finished\");\n};\n\nconst writeYoutubeHistory = async (history) => {\n  let d = history.map((item) => {\n    return {\n      url: item.titleUrl,\n      title: item.title,\n      date: new Date(item.time),\n      channel: item.subtitles ? item.subtitles.name : \"channel removed\",\n      channel_url: item.subtitles ? item.subtitles.url : \"channel removed\",\n    };\n  });\n  // for (let i = 0; i < d.length; i++) {\n  //   console.log(d[i]);\n  //   await db.addData([d[i]], \"youtube\");\n\n  // }\n  await db.addData(d, \"youtube\");\n  await db.updateDataStatus(\"youtube\", \"finished\");\n};\n\nconst convertTimestamp = (time) => {\n  // seems to be in microseconds since epoch\n  return new Date(Math.round(time / 1000));\n};\n\nGatherGoogleTakeout.propTypes = propTypes;\nexport default GatherGoogleTakeout;\n","import React, { useState } from \"react\";\nimport GatherCard from \"./GatherCard\";\nimport GatherGoogleTakeout from \"components/gather/GatherGoogleTakeout\";\n\n// Like explorecards, this creates the gather cards\n// These are a bit more tricky because these create modals (instead of routing to a new page)\n// The gather components therefore take the GatherCard as a child (used to trigger the modal)\n// and a setLoading prop that reports the loading status of the gather script. (see GatherGoogleTakeout)\n\n/**\n * Returns all gather cards to be rendered on the home page.\n */\nconst GatherCardColumn = () => {\n  // Currently only uses google takeout, so it looks silly\n  return <GoogleTakeout />;\n};\n\n/**\n * Renders the gather card for Google Takeout\n */\nconst GoogleTakeout = () => {\n  const [loading, setLoading] = useState(\"idle\");\n\n  // yes, it looks weird that the GatherCard is a child of the GatherGoogleTakeout\n  // the reason is that GatherGoogleTakeout is a popup, and the GatherCard is the trigger\n  return (\n    <GatherGoogleTakeout setLoading={setLoading}>\n      <GatherCard\n        name={\"Google\"}\n        subname={\"takeout.google.com\"}\n        icon={\"google\"}\n        loading={loading}\n      />\n    </GatherGoogleTakeout>\n  );\n};\n\nexport default GatherCardColumn;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport CardTemplate from \"./CardTemplate\";\n\nconst propTypes = {\n  /** The name of the type of data to explore. */\n  name: PropTypes.string.isRequired,\n  /** A subname, for extra info */\n  subname: PropTypes.string.isRequired,\n  /** The name of an Icon from semantic ui, see https://semantic-ui.com/elements/icon.html  */\n  icon: PropTypes.string.isRequired,\n  /** The name of the table used for this data type in indexedDB */\n  table: PropTypes.string.isRequired,\n};\n\n/**\n * The template for generating ExploreCards.\n * These are the cards in the Explore column on the home page.\n */\nconst ExploreCard = ({ name, subname, icon, table }) => {\n  const history = useHistory();\n  const dataStatus = useSelector((state) => {\n    return state.dataStatus.find((data) => data.name === table);\n  });\n  if (!dataStatus) return null;\n  if (dataStatus.status === \"failed\" && !dataStatus.date) return null;\n\n  const onClick = () => {\n    history.push(table);\n  };\n\n  return (\n    <CardTemplate\n      name={name}\n      subname={subname}\n      icon={icon}\n      onClick={onClick}\n      loading={dataStatus.status}\n    >\n      <i>{lastUpdated(dataStatus.date)}</i>\n    </CardTemplate>\n  );\n};\n\nconst lastUpdated = (date) => {\n  if (!date) return \"Data not yet gathered\";\n  const oldTime = date.toISOString();\n  const currentTime = new Date().toISOString();\n\n  // if different day, show day\n  if (oldTime.slice(0, 10) !== currentTime.slice(0, 10))\n    return `Data imported on ${oldTime.slice(0, 10)}`;\n\n  // otherwise show time\n  return \"Data imported today\";\n};\n\nExploreCard.propTypes = propTypes;\nexport default ExploreCard;\n","import { useLiveQuery } from \"dexie-react-hooks\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setDataStatus } from \"actions\";\nimport db from \"apis/dexie\";\nimport ExploreCard from \"./ExploreCard\";\n\n/**\n * Returns all explore cards to be rendered on the home page.\n */\nconst ExploreCardColumn = () => {\n  const dispatch = useDispatch();\n\n  // useLiveQuery monitors IndexedDb and sends updates to the redux store\n  // this is used to display the status of the cards\n  useLiveQuery(async () => {\n    const dataStatus = await db.idb.datastatus.toArray();\n    dispatch(setDataStatus(dataStatus));\n  });\n\n  return (\n    <>\n      <Browsing />\n      <Search />\n      <Youtube />\n    </>\n  );\n};\n\nconst Browsing = () => {\n  return (\n    <ExploreCard\n      name={\"Browsing history\"}\n      subname={\"What pages did you visit?\"}\n      icon={\"history\"}\n      table={\"browsinghistory\"}\n    />\n  );\n};\n\nconst Search = () => {\n  return (\n    <ExploreCard\n      name={\"Google searches\"}\n      subname={\"What did you search for?\"}\n      icon={\"search\"}\n      table={\"searchhistory\"}\n    />\n  );\n};\n\nconst Youtube = () => {\n  return (\n    <ExploreCard\n      name={\"Youtube\"}\n      subname={\"Channels and videos\"}\n      icon={\"youtube\"}\n      table={\"youtube\"}\n    />\n  );\n};\n\nexport default ExploreCardColumn;\n","import React from \"react\";\nimport { Card, Grid, Header, Icon } from \"semantic-ui-react\";\nimport logo from \"images/logo.png\";\n\nimport GatherCardColumn from \"./GatherCardColumn\";\nimport ExploreCardColumn from \"./ExploreCardColumn\";\n\nconst headerStyle = {\n  color: \"white\",\n  fontSize: \"20px\",\n  filter: \"none\",\n  background: \"#00000078\",\n  paddingBottom: \"0.3em\",\n  paddingTop: \"0.4em\",\n};\n\nconst columnStyle = {\n  marginBottom: \"1em\",\n};\n\nconst cardGroupStyle = {\n  marginTop: \"2em\",\n};\n\nconst DataSquare = () => {\n  return (\n    <div style={{ height: \"102vh\", backgroundImage: `url(${logo})`, backgroundSize: \"100% 100%\" }}>\n      <Grid stackable divided centered style={{ paddingTop: \"4em\" }}>\n        <Grid.Column textAlign=\"center\" width={5} style={columnStyle}>\n          <Header style={headerStyle}>\n            <Icon name=\"cloud download\" />\n            Gather\n          </Header>\n\n          <Card.Group style={cardGroupStyle}>\n            <GatherCardColumn />\n          </Card.Group>\n        </Grid.Column>\n        <Grid.Column textAlign=\"center\" width={5} style={columnStyle}>\n          <Header style={headerStyle}>\n            <Icon name=\"search\" />\n            Explore\n          </Header>\n\n          <Card.Group style={cardGroupStyle}>\n            <ExploreCardColumn />\n          </Card.Group>\n        </Grid.Column>\n        <Grid.Column textAlign=\"center\" width={5} style={columnStyle}>\n          <Header style={headerStyle}>\n            <Icon name=\"student\" />\n            Donate\n          </Header>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default DataSquare;\n","/**\n * Intersect ordered numbers across multiple arrays.\n * Used in this app to quickly intersect the table row ids from different filters (e.g., text query, date, key)\n *\n * @param {array} arrays an array of arrays, where each array has sorted (!!!) integers\n * @returns An array of integers\n */\nconst intersect = (arrays) => {\n  arrays = arrays.filter((array) => array !== null);\n  if (arrays.length === 0) return null;\n  if (arrays.length === 1) return arrays[0];\n\n  const cursors = new Array(arrays.length).fill(0);\n  const res = [];\n\n  while (!anyDone(arrays, cursors)) {\n    if (allEqual(arrays, cursors)) {\n      console.log(cursors[0]);\n      res.push(arrays[0][cursors[0]]);\n      for (let i = 0; i < cursors.length; i++) cursors[i]++;\n    }\n    const max = allMax(arrays, cursors);\n    for (let i = 0; i < cursors.length; i++) {\n      if (arrays[i][cursors[i]] < max) cursors[i]++;\n    }\n  }\n  return res;\n};\n\nconst anyDone = (arrays, cursors) => {\n  for (let i = 0; i < arrays.length; i++) {\n    if (arrays[i].length <= cursors[i]) return true;\n  }\n  return false;\n};\n\nconst allEqual = (arrays, cursors) => {\n  for (let i = 1; i < arrays.length; i++) {\n    if (arrays[i][cursors[i]] !== arrays[0][cursors[0]]) return false;\n  }\n  console.log(\"-------------\");\n  for (let i = 0; i < arrays.length; i++) {\n    console.log(arrays[i][cursors[i]]);\n  }\n  return true;\n};\n\nconst allMax = (arrays, cursors) => {\n  let max = arrays[0][cursors[0]];\n  for (let i = 1; i < arrays.length; i++) {\n    if (arrays[i][cursors[i]] > max) max = arrays[i][cursors[i]];\n  }\n  return max;\n};\n\nexport default intersect;\n","import React from \"react\";\nimport { Grid } from \"semantic-ui-react\";\n\n/**\n * Create a Grid with a background that has a color on top of it.\n * This can be used with a transparent color to for instance darken a background\n * (for deployment, probably better to eventually just use a darkened image)\n * @returns\n */\nconst ColoredBackgroundGrid = ({ children, background, color }) => {\n  // just wrap the children in this component, pass an image path to background and a string to color\n  return (\n    <>\n      <div\n        style={{\n          zIndex: 1,\n          top: 0,\n          bottom: \"100px\",\n          right: 0,\n          left: 0,\n          background: color,\n          position: \"absolute\",\n        }}\n      />\n      <Grid\n        style={{\n          height: \"90vh\",\n          overflow: \"auto\",\n          backgroundSize: \"100% 100%\",\n          backgroundImage: `url(${background})`,\n        }}\n      >\n        <div style={{ zIndex: 2, width: \"100%\", padding: \"0px\" }}>{children}</div>\n      </Grid>\n    </>\n  );\n};\n\nexport default ColoredBackgroundGrid;\n","import db from \"apis/dexie\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Button, ButtonGroup, Checkbox, Container, Dimmer, Header, Loader, Modal, Segment, Table, Visibility\n} from \"semantic-ui-react\";\n\nconst PAGESIZE = 25;\n\nconst propTypes = {\n  /** The name of the table in DB */\n  table: PropTypes.string,\n  /** An object with layout information.\n   * The keys should be columns in the table\n   * The values are objects with a \"type\" (header, meta or description) and a react inline style\n   * See BrowsingHistory.js or SearchHistory.js for examples\n   */\n  layout: PropTypes.array,\n  /** An array with row IDs to filter on */\n  selection: PropTypes.array,\n  /** A string to indicate the loading status */\n  loading: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\n\n/**\n * Creates a list of items for a given table in the indexedDB\n */\nconst DataList = ({ table, layout, selection, loading }) => {\n  const [data, setData] = useState([]);\n  const [n, setN] = useState(1);\n  const [selectionN, setSelectionN] = useState(0);\n\n  const [confirm, setConfirm] = useState({ open: false, ask: true, itemIds: [] });\n  useEffect(() => {\n    if (!table) {\n      setData([]);\n      return null;\n    }\n    fetchFromDb(table, PAGESIZE, setN, setSelectionN, setData, selection);\n  }, [table, selection, confirm]);\n\n  const onBottomVisible = async () => {\n    // infinite scroll\n    // <Visibility> checks whether bottom of (invisible) div is visible, and if so adds more data\n    const offset = data.length;\n    let newdata = null;\n    if (selection === null) {\n      newdata = await db.getTableBatch(table, offset, PAGESIZE);\n    } else {\n      newdata = await db.getTableFromIds(table, selection.slice(offset, offset + PAGESIZE));\n    }\n    setData([...data, ...newdata]);\n  };\n\n  const createItem = (item) => {\n    return layout.map((field, i) => {\n      let content = item[field];\n      if (content instanceof Date) content = content.toISOString().slice(0, 19).replace(/T/g, \" \");\n      return (<Table.Cell key={i+1}>{content}</Table.Cell>)\n    });\n  };\n\n  const createItems = () => {\n    if (data === null || data.length === 0) return null;\n\n    //const image = Object.keys(layout).find((field) => layout[field].type === \"image\");\n\n    return data.map((item, i) => {\n      return (\n        <Table.Row key={i}>\n          {/* {image ? <Item.Image size=\"tiny\" src={item[image]} /> : null} */}\n          <Table.Cell key=\"0\">\n            <Button\n              onClick={() => setConfirm({ ...confirm, open: true, itemIds: [item.id] })}\n              icon=\"trash alternate\" />\n          </Table.Cell>\n          {createItem(item)}\n        </Table.Row>\n      );\n    });\n  };\n\n  return (\n    <Container\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        padding: \"0\",\n        background: \"#00000087\",\n      }}\n    >\n      <Segment style={{ background: \"white\" }}>\n        <Header textAlign=\"center\" style={{ color: \"black\" }}>\n          <Dimmer active={loading}>\n            <Loader />\n          </Dimmer>\n          {selectionN === n ? null : (\n            <Button\n              onClick={() => setConfirm({ ...confirm, open: true, itemIds: selection })}\n              icon=\"trash alternate\"\n              style={{ color: \"#b23434bd\", height: \"1em\", padding: \"0\", background: \"#ffffff00\" }}\n            />\n          )}\n          {selectionN === n ? n : `${selectionN} / ${n}`} items\n        </Header>\n      </Segment>\n\n      <Container style={{ width: \"100%\", height: \"100%\", overflowY: \"auto\" }}>\n        <Visibility continuous onBottomVisible={onBottomVisible}>\n          <Table striped fixed>\n            <Table.Header>\n              <Table.Row>\n                { ['', ...layout].map((field, i) =>\n                  (<Table.HeaderCell key={i} width={[1, 3, 10, 10][i]} style={{top: \"0px\", position: \"sticky\", zIndex: \"2\"}}>\n                    {field.charAt(0).toUpperCase() + field.slice(1)}\n                  </Table.HeaderCell>))\n                }\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>{createItems()}</Table.Body>\n          </Table>\n        </Visibility>\n      </Container>\n\n      <ConfirmModal table={table} confirm={confirm} setConfirm={setConfirm} />\n    </Container>\n  );\n};\n\nconst ConfirmModal = ({ table, confirm, setConfirm }) => {\n  const [ask, setAsk] = useState(!confirm.ask);\n  const n = confirm.itemIds.length;\n\n  const handleDelete = async () => {\n    await db.deleteTableIds(table, confirm.itemIds);\n    setConfirm({ open: false, ask: !ask, itemIds: [] });\n  };\n\n  if (!confirm.open) return null;\n\n  if (!confirm.ask && n === 1) {\n    handleDelete();\n    return null;\n  }\n\n  return (\n    <Modal\n      style={{ backgroundColor: \"#00000054\" }}\n      open={confirm.open}\n      onClose={() => setConfirm({ ...confirm, open: false })}\n    >\n      <Modal.Header>Delete item{n === 1 ? \"\" : \"s\"}</Modal.Header>\n      <Modal.Content>\n        <p>Are you sure you want to delete {n === 1 ? \"this item\" : `${n} items`}?</p>\n\n        <br />\n        <Modal.Actions>\n          <ButtonGroup centered>\n            <Button\n              fluid\n              primary\n              onClick={() => setConfirm({ open: false, ask: !ask, itemIds: [] })}\n            >\n              Cancel\n            </Button>\n            <Button fluid color=\"red\" onClick={(e, d) => handleDelete()}>\n              Yes\n            </Button>\n          </ButtonGroup>\n          {n > 1 ? null : (\n            <Checkbox\n              style={{ float: \"right\" }}\n              onChange={(e, d) => setAsk(!d.value)}\n              label=\"Do not ask again. Next time, delete immediately when clicking the trash icon\"\n            />\n          )}\n        </Modal.Actions>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nconst fetchFromDb = async (table, pageSize, setN, setSelectionN, setData, selection) => {\n  let n = await db.getTableN(table);\n  console.log(selection);\n  setSelectionN(selection === null ? n : selection.length);\n  setN(n);\n  let newdata = [];\n\n  if (n > 0) {\n    if (selection === null) {\n      newdata = await db.getTableBatch(table, 0, pageSize);\n    } else {\n      newdata = await db.getTableFromIds(table, selection.slice(0, PAGESIZE));\n    }\n  }\n\n  // prevents delay after removing items while other filters are still resetting\n  if (newdata !== null && newdata.length === 0) setSelectionN(0);\n\n  setData(newdata);\n};\n\nDataList.propTypes = propTypes;\nexport default React.memo(DataList);\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { Button, Input } from \"semantic-ui-react\";\nimport db from \"apis/dexie\";\n\nconst propTypes = {\n  /** The name of the table */\n  table: PropTypes.string,\n  /** An array with names of the (text) columns in the table that should be used for the fulltext search */\n  searchOn: PropTypes.array,\n  /** A callback function for returning the row IDs that match the query */\n  setSelection: PropTypes.func,\n  /** A callback function for setting the loading status */\n  setLoading: PropTypes.func,\n};\n\n/**\n * Create an input for full text search\n */\nconst QueryInput = ({ table, searchOn, setSelection, setLoading }) => {\n  const [search, setSearch] = useState(\"\");\n  const [selectionStatus, setSelectionStatus] = useState(\"none\");\n\n  const n = useLiveQuery(() => db.idb.table(table).count());\n\n  useEffect(() => {\n    setLoading(selectionStatus === \"searching\");\n  }, [selectionStatus, setLoading]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      searchSelection(table, searchOn, search, setSelection, setSelectionStatus);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [table, search, setSelectionStatus, searchOn, setSelection, n]);\n\n  return (\n    <Input\n      label=\"Search data\"\n      loading={selectionStatus === \"searching\"}\n      value={search}\n      icon={\n        <Button\n          icon=\"close\"\n          onClick={() => setSearch(\"\")}\n        />\n      }\n      onChange={(e, d) => setSearch(d.value)}\n    ></Input>\n  );\n};\n\nconst searchSelection = async (table, searchOn, search, setSelection, setSelectionStatus) => {\n  if (search === \"\") {\n    setSelection(null);\n    setSelectionStatus(\"none\");\n    return;\n  }\n  setSelectionStatus(\"searching\");\n\n  const selection = await db.getSelectionQuery(table, searchOn, search);\n  setSelection(selection);\n  setSelectionStatus(\"finished\");\n};\n\nQueryInput.propTypes = propTypes;\nexport default React.memo(QueryInput);\n\n// just keeping this here so I wont forget how insanely usefull this is.\n// A second argument to React.memo lets you view the prev and next props\n// to see which bastard rerenders the living hell out of a component\n// export default React.memo(QueryTable, (prevprops, nextprops) => {\n//   console.log(prevprops);\n//   console.log(nextprops);\n//   console.log(prevprops.selection === nextprops.selection);\n//   console.log(prevprops.setSelection === nextprops.setSelection);\n//   console.log(prevprops.searchOn === nextprops.searchOn);\n// });\n","import db from \"apis/dexie\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Dimmer, Header, Item, Loader } from \"semantic-ui-react\";\nimport \"./Statistics.css\";\n\nconst propTypes = {\n  /** An array with row IDs to filter on */\n  selection: PropTypes.array,\n  /** A string to indicate the loading status */\n  loading: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\n\n/**\n * Creates a list of statistics based on the selected table\n */\nconst Statistics = ({selection, loading }) => {\n  const [data, setData] = useState([]);\n  const [loadingData, setLoadingData] = useState(false);\n\n  useEffect(() => {\n    console.log(\"Selection Statistics: \", selection);\n    fetchFromDb(setData, setLoadingData, selection);\n  }, [selection, setData]);\n\n\n  return (\n    <Container\n      style={{\n        height: \"98%\",\n        padding: \"20px\",\n        background: \"#55555587\",\n        borderRadius: \"10px\"\n      }}\n    >\n      <Dimmer active={loading || loadingData}>\n        <Loader />\n      </Dimmer>\n      <Header as=\"h1\" align={\"center\"} style={{ color: \"white\", padding: \"0\", margin: \"0\" }}>\n        Statistics\n      </Header>\n      <Item.Group>\n        <Item>\n          <Item.Content>\n            <Item.Header style={{ color: \"white\"}}>Website Visits</Item.Header>\n            <Item.Description style={{ color: \"white\"}}>{data.total_visits}</Item.Description>\n          </Item.Content>\n        </Item>\n        <Item>\n          <Item.Content>\n            <Item.Header style={{ color: \"white\"}}>Most Visited Domain</Item.Header>\n            <Item.Description style={{ color: \"white\"}}>{data.max_domain} ({data.max})</Item.Description>\n          </Item.Content>\n        </Item>\n        <Item>\n          <Item.Content>\n            <Item.Header style={{ color: \"white\"}}>Average visits per Domain</Item.Header>\n            <Item.Description style={{ color: \"white\"}}>{data.mean}</Item.Description>\n          </Item.Content>\n        </Item>\n        <Item>\n          <Item.Content>\n            <Item.Header style={{ color: \"white\"}}>Number of Unique Domains</Item.Header>\n            <Item.Description style={{ color: \"white\"}}>{data.num_domains}</Item.Description>\n          </Item.Content>\n        </Item>\n        <Item>\n          <Item.Content>\n            <Item.Header style={{ color: \"white\"}}>Google Searches</Item.Header>\n            <Item.Description style={{ color: \"white\"}}>{data.search}</Item.Description>\n          </Item.Content>\n        </Item>\n        <Item>\n          <Item.Content>\n            <Item.Header style={{ color: \"white\"}}>Youtube Videos</Item.Header>\n            <Item.Description style={{ color: \"white\"}}>{data.youtube}</Item.Description>\n          </Item.Content>\n        </Item>\n      </Item.Group>\n    </Container>\n  );\n};\n\nconst fetchFromDb = async (setData, setLoadingData, selection) => {\n  setLoadingData(true);\n  db.getDataFrame(selection).then(async (stats) => {\n\n    const data = stats.sortBy(\"domain\");\n    let group = data.groupBy(\"domain\");\n\n    let counts = group.aggregate(group => group.count()).rename(\"aggregation\", \"domain_count\");\n    counts = counts.sortBy('domain_count', true);\n\n    const statistics = {};\n    statistics['total_visits'] = data.count();\n    statistics['max'] = counts.stat.max('domain_count');\n    statistics['max_domain'] = counts.getRow(0).get(\"domain\");\n    statistics['mean'] = Math.round(counts.stat.mean(\"domain_count\"));\n    statistics['num_domains'] = counts.count();\n    statistics['youtube'] = await db.getTableN(\"youtube\");\n    statistics['search'] = await db.getTableN(\"searchhistory\");\n\n    setData(statistics);\n    setLoadingData(false);\n  })\n};\n\nStatistics.propTypes = propTypes;\nexport default React.memo(Statistics);","import { createClassFromSpec } from 'react-vega';\n\nexport default createClassFromSpec({spec: {\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"width\": 700,\n  \"height\": 420,\n  \"padding\": 0,\n  \"autosize\": \"none\",\n\n  \"data\": [\n    {\n      \"name\": \"tree\",\n      \"transform\": [\n        {\n          \"type\": \"stratify\",\n          \"key\": \"name\",\n          \"parentKey\": \"parent\"\n        },\n        {\n          \"type\": \"pack\",\n          \"field\": \"count\",\n          \"sort\": {\"field\": \"count\"},\n          \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}]\n        },\n        {\n          \"type\": \"filter\",\n          \"expr\": \"datum.name != 'root'\"\n        }\n      ]\n    }\n  ],\n\n  \"signals\": [\n    {\n      \"name\": \"selectedDatum\",\n      \"value\": {},\n      \"on\": [\n        { \"events\": \"click\", \"update\": \"datum\", \"force\": \"true\" }\n      ]\n    }\n  ],\n\n  \"scales\": [\n    {\n      \"name\": \"color\",\n      \"type\": \"ordinal\",\n      \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n      \"range\": {\"scheme\": \"category20\"}\n    }\n  ],\n\n  \"marks\": [\n    {\n      \"type\": \"symbol\",\n      \"from\": {\"data\": \"tree\"},\n      \"encode\": {\n        \"enter\": {\n          \"shape\": {\"value\": \"circle\"},\n          \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n          \"tooltip\": {\"signal\": \"datum.name + (datum.size ? ', ' + datum.size + ' bytes' : '')\"}\n        },\n        \"update\": {\n          \"x\": {\"field\": \"x\"},\n          \"y\": {\"field\": \"y\"},\n          \"size\": {\"signal\": \"4 * datum.r * datum.r\"},\n          \"stroke\": {\"value\": \"white\"},\n          \"strokeWidth\": {\"value\": 0.8}\n        },\n        \"hover\": {\n          \"stroke\": {\"value\": \"red\"},\n          \"strokeWidth\": {\"value\": 2}\n        }\n      }\n    },\n    // {\n    //   \"type\": \"image\",\n    //   \"from\": {\"data\": \"tree\"},\n    //   \"encode\": {\n    //     \"enter\": {\n    //       \"url\": {\"signal\": \"datum.count > 500 ? '/favicon/' + datum.name + '.ico' : ''\"},\n    //       \"x\": {\"field\": \"x\"},\n    //       \"y\": {\"field\": \"y\"},\n    //       \"width\": {\"value\": 32},\n    //       \"height\": {\"value\": 32},\n    //     },\n    //     \"update\": {\n    //     }\n    //   }\n    // }\n  ]\n}});\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport db from \"apis/dexie\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport BubbleChartSpec from './BubbleChartSpec';\nimport { Card, Button, Image } from \"semantic-ui-react\";\n\nconst propTypes = {\n  /** The name of the table in db */\n  table: PropTypes.string,\n  /** The name of the field in db */\n  field: PropTypes.string,\n  /** An array with a selection of row ids in table */\n  inSelection: PropTypes.array,\n  /** An integer specifying the number of words in the cloud*/\n  nWords: PropTypes.number,\n  /** A boolean for whether data is loading */\n  loading: PropTypes.bool,\n  /** A callback for setting the selection state */\n  setOutSelection: PropTypes.func,\n};\n\n/**\n * Makes a wordcloud for keys, for a given table:field in db\n */\nconst BubbleChart = ({ table, field, inSelection, nWords, loading, setOutSelection }) => {\n  const [keys, setKeys] = useState(new Set([]));\n  const [data, setData] = useState({tree: []});\n  const [loadingData, setLoadingData] = useState(false);\n  const [selectedDatum, setSelectedDatum] = useState(null);\n\n  const n = useLiveQuery(() => db.idb.table(table).count());\n\n  useEffect(() => {\n    prepareData(table, field, inSelection, setData, setLoadingData, setKeys);\n  }, [table, field, inSelection, setData, n, setLoadingData, setKeys]);\n\n  const onSelectedDatum = (signal, datum) => {\n    setSelectedDatum(datum);\n  }\n\n  const deleteSelectedDatum = () => {\n    console.log(\"delete\");\n    setSelectedDatum(null);\n  };\n\n  const signalListeners = { selectedDatum: onSelectedDatum };\n\n  const popupStyle = {\n    zIndex: 1,\n    position: \"absolute\",\n    left: selectedDatum ? selectedDatum.x : 0,\n    top: selectedDatum ? selectedDatum.y : 0\n  };\n\n  return (\n    <div style={{position: \"relative\"}}>\n      <BubbleChartSpec data={data} signalListeners={signalListeners} actions={false} />\n      { selectedDatum && <div style={popupStyle}>\n        <Card>\n          <Card.Content>\n            <Image\n              floated='left'\n              size='mini'\n              src='/favicon.ico' //TODO\n            />\n            <Button\n              basic\n              floated='right'\n              size='mini'\n              icon='close'\n              onClick={() => setSelectedDatum(null)}\n            />\n            <Card.Header>{selectedDatum.name}</Card.Header>\n            <Card.Meta>{`${selectedDatum.count} visits`}</Card.Meta>\n            <Card.Description>Category: TODO</Card.Description>\n          </Card.Content>\n          <Card.Content extra>\n            <div className='ui two buttons'>\n              <Button basic color='red' onClick={deleteSelectedDatum}>\n                Delete\n              </Button>\n            </div>\n          </Card.Content>\n        </Card>\n      </div>}\n    </div>\n  );\n}\n\nconst prepareData = async (table, field, selection, setData, setLoadingData, setKeys) => {\n  setLoadingData(true);\n\n  let keyTotalObj = {};\n\n  let t = await db.idb.table(table);\n\n  let collection =\n    selection === null ? await t.toCollection() : await t.where(\"id\").anyOf(selection);\n\n\n  await collection.each((entry) => {\n    let keys = Array.isArray(entry[field]) ? entry[field] : [entry[field]];\n    for (let key of keys) {\n      if (key !== \"\") {\n        key = key.split('.').slice(-2).join('.')\n\n        // Domain entry\n        if (keyTotalObj[key] === undefined) {\n          keyTotalObj[key] = { name: key, parent: \"root\", count: 1 };\n        }\n        else {\n          keyTotalObj[key].count++;\n        }\n\n        // // Url entry\n        // const url = entry['url'];\n        // if (url !== key) {\n        //   if (keyTotalObj[url] === undefined) {\n        //     keyTotalObj[url] = { name: url, parent: key, count: 1 }\n        //   }\n        //   else {\n        //     keyTotalObj[url].count++;\n        //   }\n        // }\n      }\n    }\n  });\n\n  let keyTotal = [{name: \"root\"}, ...Object.values(keyTotalObj)];\n  setData({ tree: keyTotal });\n  setLoadingData(false);\n\n  setKeys((keys) => new Set([...keys].filter((key) => keyTotalObj[key] != null)));\n};\n\nBubbleChart.propTypes = propTypes;\nexport default React.memo(BubbleChart);\n","import PropTypes from \"prop-types\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Button, Grid, Icon, Segment } from \"semantic-ui-react\";\nimport intersect from \"util/intersect\";\nimport ColoredBackgroundGrid from \"./dashboardParts/ColoredBackgroundGrid\";\nimport DataList from \"./dashboardParts/DataList\";\nimport QueryInput from \"./dashboardParts/QueryInput\";\nimport Statistics from \"./dashboardParts/Statistics\";\n//import KeyCloud from \"./dashboardParts/KeyCloud\";\nimport BubbleChart from \"./dashboardParts/BubbleChart\";\n\nconst gridStyle = { paddingTop: \"0em\", marginTop: \"0em\", height: \"90vh\" };\n\nconst propTypes = {\n  /** an Array indicating which fields in table should be used in the fulltext search */\n  searchOn: PropTypes.array.isRequired,\n  /** an object that conveys which fields in the table are shown in the DataList */\n  layout: PropTypes.array.isRequired,\n  /** the name of the table in the indexedDB */\n  table: PropTypes.string.isRequired,\n  /** the field in the table that is used in the wordcloud. Can also be a multientry index (e.g., an indexed array of words in indexedDB) */\n  cloudKey: PropTypes.string.isRequired,\n};\n\n/**\n * Renders a dashboard page with components for browsing and visualizing history data\n */\nconst HistoryDashboard = ({ searchOn, layout, table, cloudKey }) => {\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(false);\n\n  // The selection states are arrays of row ids\n  // the intersection of these arrays is used to combine selections\n  // this is ok-ish fast, since the id indices are ordered; see intersect function\n  // but i'm sure there are better solutions\n  const [selection, setSelection] = useState(null);\n  const [querySelection, setQuerySelection] = useState(null);\n\n  // for the key and time selections we need both in and out selections\n  // the in selection is the combined selection of other filters\n  // the out selection is the selection based on the filter itself\n  // (this way the out selection does not need to be updated if the in selection changes,\n  //  and visualizations like word clouds also need to show the non-selected items)\n  const [keyInSelection, setKeyInSelection] = useState(null);\n  const [keyOutSelection, setKeyOutSelection] = useState(null);\n  const [timeInSelection, setTimeInSelection] = useState(null);\n  const [timeOutSelection, setTimeOutSelection] = useState(null);\n\n  useEffect(() => {\n    console.log(keyOutSelection);\n    console.log(timeOutSelection);\n    console.log(intersect([querySelection, keyOutSelection, timeOutSelection]));\n    setSelection(intersect([querySelection, keyOutSelection, timeOutSelection]));\n  }, [querySelection, keyOutSelection, timeOutSelection]);\n\n  useEffect(() => {\n    setKeyInSelection(intersect([querySelection, timeOutSelection]));\n  }, [querySelection, timeOutSelection]);\n\n  useEffect(() => {\n    setTimeInSelection(intersect([querySelection, keyOutSelection]));\n  }, [querySelection, keyOutSelection]);\n\n  const donateData = () => {\n    //TODO: submit filtered data\n    history.push(\"/goodies\");\n  }\n\n  return (\n    <Fragment>\n    <ColoredBackgroundGrid color={\"#000000b0\"}>\n      <Segment>\n        <Button\n          style={{ background: \"#ffffff\", margin: \"0\", float: \"left\" }}\n          onClick={() => history.push(\"/datasquare\")}>\n          <Icon name=\"backward\" />\n          Go back\n        </Button>\n        <div style={{display: \"table\", margin: \"0 auto\"}}>\n          <QueryInput\n              table={table}\n              searchOn={searchOn}\n              setSelection={setQuerySelection}\n              setLoading={setLoading} />\n        </div>\n      </Segment>\n      <Grid divided={\"vertically\"} style={gridStyle}>\n          <Grid.Row centered columns={2}>\n            <Grid.Column width={10} style={{ padding: \"1em\", paddingLeft: \"2em\", paddingRight: \"0\"}}>\n              <BubbleChart\n                table={table}\n                field={cloudKey}\n                inSelection={keyInSelection}\n                nWords={50}\n                loading={loading}\n                setOutSelection={setKeyOutSelection}\n              />\n            </Grid.Column>\n            <Grid.Column width={4} style={{ padding: \"1em\", paddingLeft: \"0\" }}>\n              <Statistics table={table} layout={layout} selection={selection} loading={loading} />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row centered style={{ padding: \"0\"}}>\n            <Grid.Column width={14} style={{ height: \"40vh\"}}>\n              <DataList table={table} layout={layout} selection={selection} loading={loading} />\n            </Grid.Column>\n          </Grid.Row>\n      </Grid>\n    </ColoredBackgroundGrid>\n    <Segment style={{background: \"white\", textAlign: \"center\", position: \"absolute\", bottom: \"0px\", width: \"100%\", zIndex: 4}}>\n            <Button size=\"huge\"\n              style={{color: \"deeppink\", background: \"gold\", width: \"80%\", boxShadow: \"5px 5px 2px grey\"}}\n              onClick={() => donateData()}>Donate Your Data & Discover 10 facts about your online-self!</Button>\n          </Segment>\n    </Fragment>\n);\n};\n\nHistoryDashboard.propTypes = propTypes;\nexport default HistoryDashboard;\n","import React from \"react\";\nimport HistoryDashboard from \"./dashboards/HistoryDashboard\";\n\nconst SEARCHON = [\"url\", \"title\"];\n\nconst LAYOUT = [\"date\", \"title\", \"url\"];\n// const LAYOUT = {\n//   url: { type: \"header\", style: { color: \"white\" } },\n//   title: { type: \"description\", style: { color: \"white\" } },\n//   date: { type: \"meta\", style: { color: \"white\", fontStyle: \"italic\" } },\n// };\n\n/**\n * Renders a HistoryDashboard for the browsing history data.\n * Note that this component is reached via the react router.\n * When the card on the home page is clicked, it navigates to /browsinghistory\n */\nconst BrowsingHistory = () => {\n  return (\n    <HistoryDashboard\n      searchOn={SEARCHON}\n      layout={LAYOUT}\n      table={\"browsinghistory\"}\n      cloudKey={\"domain\"}\n    />\n  );\n};\n\nexport default BrowsingHistory;\n","import React from \"react\";\nimport HistoryDashboard from \"./dashboards/HistoryDashboard\";\n\nconst SEARCHON = [\"channel\", \"title\"];\n\nconst LAYOUT = [ \"date\", \"channel\", \"title\" ];\n\n/**\n * Renders a HistoryDashboard for the youtube history data.\n * Note that this component is reached via the react router.\n * When the card on the home page is clicked, it navigates to /youtube\n */\nconst YoutubeHistory = () => {\n  return (\n    <HistoryDashboard searchOn={SEARCHON} layout={LAYOUT} table={\"youtube\"} cloudKey={\"channel\"} />\n  );\n};\n\nexport default YoutubeHistory;\n","import React from \"react\";\nimport HistoryDashboard from \"./dashboards/HistoryDashboard\";\n\nconst SEARCHON = [\"word\"];\n\nconst LAYOUT = [ \"date\", \"query\" ];\n\n/**\n * Renders a HistoryDashboard for the google search data.\n * Note that this component is reached via the react router.\n * When the card on the home page is clicked, it navigates to /searchhistory\n */\nconst SearchHistory = () => {\n  return (\n    <HistoryDashboard\n      searchOn={SEARCHON}\n      layout={LAYOUT}\n      table={\"searchhistory\"}\n      cloudKey={\"word\"}\n    />\n  );\n};\n\nexport default SearchHistory;\n","import { ResponsiveCalendar } from \"@nivo/calendar\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, ButtonGroup, Dimmer, Grid, Loader } from \"semantic-ui-react\";\nimport db from \"apis/dexie\";\nimport createColors from \"util/createColors\";\n\nconst COLORS = createColors(100, \"white\", \"#c28c95\", \"#954856\");\nconst ZEROCOLOR = [\"white\"];\nconst LEGENDS = [\n  {\n    anchor: \"bottom-right\",\n    direction: \"row\",\n    translateY: 36,\n    itemCount: 4,\n    itemWidth: 42,\n    itemHeight: 36,\n    itemsSpacing: 14,\n    itemDirection: \"right-to-left\",\n  },\n];\nconst MARGIN = { top: 0, right: 0, bottom: 0, left: 40 };\nconst THEME = { textColor: \"white\", fontSize: 14 };\n\nconst TimeLine = ({ table, field, inSelection, loading, setOutSelection }) => {\n  const [data, setData] = useState(null);\n  const [days, setDays] = useState(null);\n  const [dayRange, setDayRange] = useState([null, null]);\n  const [loadingData, setLoadingData] = useState(false);\n\n  const [selectionStatus, setSelectionStatus] = useState(\"idle\");\n\n  const n = useLiveQuery(() => db.idb.table(table).count());\n\n  useEffect(() => {\n    prepareData(table, field, inSelection, setData, setLoadingData);\n  }, [table, field, inSelection, setData, setLoadingData, n]);\n\n  useEffect(() => {\n    if (data === null) {\n      setDays(null);\n      return;\n    }\n    setDays(\n      data.day.data.filter((day) => {\n        if (dayRange[0] !== null && day.date < dayRange[0]) return false;\n        if (dayRange[1] !== null && day.date > dayRange[1]) return false;\n        return true;\n      })\n    );\n  }, [data, dayRange, setDays]);\n\n  useEffect(() => {\n    let ignore = false;\n    const getSelection = async () => {\n      let selection = null;\n      if (dayRange[0] !== null || dayRange[1] !== null) {\n        selection = await db.getSelectionRange(table, field, dayRange[0], dayRange[1]);\n      }\n      if (!ignore) setOutSelection(selection);\n    };\n    getSelection();\n\n    return () => {\n      ignore = true; // use closure to 'cancel' promise. prevents delayed older requests from overwriting new\n    };\n  }, [dayRange, table, field, setOutSelection]);\n\n  if (data === null || days === null) return null;\n\n  return (\n    <Grid\n      style={{\n        width: \"100%\",\n        background: \"#ffffff00\",\n        border: \"none\",\n        boxShadow: \"none\",\n        paddingTop: \"2em\",\n      }}\n    >\n      <Grid.Row centered style={{ padding: \"0\" }}>\n        <ButtonGroup>\n          <Button\n            primary\n            style={{ width: \"20em\" }}\n            onClick={() => setSelectionStatus(\"select_start\")}\n          >\n            {selectionStatus === \"select_start\"\n              ? \"Click on calender to set start date\"\n              : dayRange[0]\n              ? `From date: ${formatDate(dayRange[0])}`\n              : `Click here to set start date`}\n          </Button>\n          <Button\n            secondary\n            style={{ width: \"20em\" }}\n            onClick={() => setSelectionStatus(\"select_end\")}\n          >\n            {selectionStatus === \"select_end\"\n              ? \"Click on calender to set end date\"\n              : dayRange[1]\n              ? `To date: ${formatDate(dayRange[1])}`\n              : `Click here to set end date`}\n          </Button>\n          <Button\n            disabled={dayRange[0] === null && dayRange[1] === null}\n            onClick={() => setDayRange([null, null])}\n          >\n            reset\n          </Button>\n        </ButtonGroup>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Column\n          width={16}\n          style={{ height: \"30em\", width: \"100%\", padding: \"0\", margin: \"0\" }}\n        >\n          <Dimmer active={loading || loadingData}>\n            <Loader />\n          </Dimmer>\n          <ResponsiveCalendar\n            data={days}\n            from={data.day.min}\n            to={data.day.max}\n            emptyColor=\"#ededed1f\"\n            colors={days.some((day) => day.value > 0) ? COLORS : ZEROCOLOR}\n            margin={MARGIN}\n            yearSpacing={35}\n            monthSpacing={2}\n            monthBorderColor=\"#ffffff\"\n            dayBorderWidth={2}\n            dayBorderColor=\"#150a0a2e\"\n            legends={LEGENDS}\n            onContextMenu={(e) => console.log(e)}\n            onClick={(e) => {\n              if (selectionStatus === \"select_start\") {\n                let midnightMorning = new Date(e.day);\n                if (dayRange[1] !== null && dayRange[1] < midnightMorning)\n                  midnightMorning = new Date(dayRange[1]);\n                midnightMorning.setHours(0, 0, 0, 0);\n                setDayRange([midnightMorning, dayRange[1]]);\n                setSelectionStatus(\"idle\");\n              }\n              if (selectionStatus === \"select_end\") {\n                console.log(e);\n                let midnightEvening = new Date(e.day);\n                if (dayRange[0] !== null && dayRange[0] >= midnightEvening)\n                  midnightEvening = new Date(dayRange[0]);\n                midnightEvening.setHours(23, 59, 59, 0);\n                setDayRange([dayRange[0], midnightEvening]);\n                setSelectionStatus(\"idle\");\n              }\n            }}\n            theme={THEME}\n          />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nconst prepareData = async (table, field, selection, setData, setLoadingData) => {\n  setLoadingData(true);\n\n  let dayTotalObj = {};\n  let weekday = [0, 0, 0, 0, 0, 0, 0];\n\n  let t = await db.idb.table(table);\n\n  let collection =\n    selection === null ? await t.toCollection() : await t.where(\"id\").anyOf(selection);\n\n  let dateOrdered = t.orderBy(field);\n  let minDate = await dateOrdered.first();\n  let maxDate = await dateOrdered.last();\n  minDate = minDate.date;\n  maxDate = maxDate.date;\n\n  await collection.each((url) => {\n    if (url[field] !== \"\") {\n      weekday[url[field].getDay()]++;\n      const day = formatDate(url[field]);\n      dayTotalObj[day] = (dayTotalObj[day] || 0) + 1;\n    }\n  });\n\n  if (minDate === null) return null;\n\n  // add empty days within timeframe\n  for (let d = new Date(minDate); d <= maxDate; d.setDate(d.getDate() + 1)) {\n    const day = formatDate(d);\n    if (!dayTotalObj[day]) dayTotalObj[day] = 0;\n  }\n\n  let dayTotal = Object.keys(dayTotalObj).map((day) => {\n    const date = new Date(day);\n    date.setHours(0, 0, 0, 0);\n    return { date: date, day: day, value: dayTotalObj[day] };\n  });\n\n  setData({\n    day: { min: formatDate(minDate), max: formatDate(maxDate), data: dayTotal },\n    weekday: weekday,\n  });\n  setLoadingData(false);\n};\n\nconst addZ = (n) => {\n  return n < 10 ? \"0\" + n : \"\" + n;\n};\n\nconst formatDate = (date) => {\n  return date.getFullYear() + \"-\" + addZ(date.getMonth() + 1) + \"-\" + addZ(date.getDate());\n};\n\nexport default React.memo(TimeLine);\n","import Rainbow from \"rainbowvis.js\";\n\n/**\n * Create a gradient from color 1 to 2 to 3 in n steps\n * @param {number} n        The number of steps\n * @param {string} color1   Starting color\n * @param {string} color2   Mid color\n * @param {string} color3   Ending color\n * @returns An array of n colors\n */\nconst createColors = (n, color1, color2, color3) => {\n  var heatmap = new Rainbow();\n  heatmap.setSpectrum(color1, color2, color3);\n  heatmap.setNumberRange(0, n);\n  const colors = [];\n  for (let i = 0; i <= n; i++) colors.push(\"#\" + heatmap.colourAt(i));\n  return colors;\n};\n\nexport default createColors;\n","import db from \"apis/dexie\";\nimport { DateTime } from \"luxon\";\nimport PropTypes from \"prop-types\";\nimport { useEffect, useState } from \"react\";\nimport { Container, Dimmer, Header, Item, Loader, Card } from \"semantic-ui-react\";\n\n\nconst propTypes = {\n  /** An array with row IDs to filter on */\n  selection: PropTypes.array,\n  /** A string to indicate the loading status */\n  loading: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\n\nconst FunFacts = ({selection, loading}) => {\n  const [data, setData] = useState([]);\n  const [loadingData, setLoadingData] = useState(false);\n\n  useEffect(() => {\n    fetchFromDb(setData, setLoadingData, selection);\n  }, [selection, setData]);\n\n  return (\n    <Container>\n      <Dimmer active={loading || loadingData}>\n        <Loader />\n      </Dimmer>\n      <Header as=\"h1\" align={\"center\"} style={{ color: \"white\", padding: \"0\", margin: \"0\" }}>\n        Fun Facts\n      </Header>\n      <Card.Group>\n        <Card>\n          <Card.Content>\n            <Card.Header>Most active</Card.Header>\n            <Card.Description>Your most active day online is <b>{data.most_active_day}</b></Card.Description>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Wake up</Card.Header>\n            <Card.Description>You usually start browsing at <b>{data.typical_start}</b></Card.Description>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Sleep</Card.Header>\n            <Card.Description>You usually stop browsing at <b>{data.typical_end}</b></Card.Description>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Most visits</Card.Header>\n            <Card.Description>On <b>{data.most_visits_day}</b> you visited <b>{data.most_visits_in_1_day}</b> websites!</Card.Description>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Taking a break</Card.Header>\n            <Card.Description>The longest period between visits is <b>{data.most_days_between_visits} days</b></Card.Description>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Morning person?</Card.Header>\n            <Card.Description>50% of your browsing happens after <b>{data.middle_point}</b></Card.Description>\n          </Card.Content>\n        </Card>\n      </Card.Group>\n    </Container>\n  );\n};\n\nconst fetchFromDb = async (setData, setLoadingData, selection) => {\n  setLoadingData(true);\n  db.getDataFrame(selection).then(stats => {\n    const facts = {};\n\n    // Calculate the most active day of the week\n    const days = stats.groupBy(\"day\");\n    const dayCount = days.aggregate(group => group.count()).rename('aggregation', 'count')\n    const m = dayCount.stat.max('count');\n    const mostBusyDay = dayCount.filter(row => row.get(\"count\") === m).getRow(0).get('day');\n    const dayName = new Date(0, 0, mostBusyDay).toLocaleDateString('default',{weekday: 'long'});\n\n    facts['most_active_day'] = dayName;\n\n    // Calculate the earliest and latest activity on average\n    const timeGroup = stats.groupBy(\"dateOnly\");\n    const minTime = timeGroup.aggregate(group => group.stat.min('time')).rename(\"aggregation\", \"mintime\");\n    const maxTime = timeGroup.aggregate(group => group.stat.max('time')).rename(\"aggregation\", \"maxtime\");\n\n    const avgmintime = minTime.stat.mean('mintime');\n    const avgmaxtime = maxTime.stat.mean('maxtime');\n\n    facts['typical_start'] = new Date(avgmintime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n    facts['typical_end'] = new Date(avgmaxtime).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n\n    // Calculate the most sites in 1 day\n    const mostVisits = timeGroup.aggregate(group => group.count()).rename(\"aggregation\", \"count\");\n    const mV = mostVisits.stat.max('count');\n    const mostVisitsDay = mostVisits.filter(row => row.get(\"count\") === mV).getRow(0).get('dateOnly');\n    const mostVisitsDayName = mostVisitsDay.toLocaleDateString('default',{weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'});\n\n    facts['most_visits_day'] = mostVisitsDayName;\n    facts['most_visits_in_1_day' ] = mV;\n\n    // Calculate the longest period without visits\n    let maxDiff = 0;\n    for (let i=1; i < stats.count(); i++) {\n      const d1 = DateTime.fromJSDate(stats.getRow(i-1).get(\"date\"));\n      const d2 = DateTime.fromJSDate(stats.getRow(i).get(\"date\"));\n      const diffInDays = d2.diff(d1, 'days');\n      if (diffInDays.days > maxDiff) {\n        maxDiff = diffInDays.days;\n      }\n    }\n\n    facts['most_days_between_visits'] = Math.round(maxDiff);\n\n    // Locate halfway point\n    const timing = stats.sortBy('time');\n    const middle = timing.getRow(Math.floor(stats.count()/2));\n    const mid_time = middle.get(\"time\").toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});\n\n    facts['middle_point'] = mid_time;\n\n    setData(facts);\n    setLoadingData(false);\n  })\n};\n\nFunFacts.propTypes = propTypes;\nexport default FunFacts","import PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Button, Grid, Icon } from \"semantic-ui-react\";\nimport intersect from \"util/intersect\";\nimport ColoredBackgroundGrid from \"./dashboardParts/ColoredBackgroundGrid\";\nimport DataList from \"./dashboardParts/DataList\";\nimport QueryInput from \"./dashboardParts/QueryInput\";\nimport Statistics from \"./dashboardParts/Statistics\";\n//import KeyCloud from \"./dashboardParts/KeyCloud\";\nimport BubbleChart from \"./dashboardParts/BubbleChart\";\nimport TimeLine from \"./dashboardParts/TimeLine\";\nimport FunFacts from \"./fun/FunFacts\";\n\nconst gridStyle = { paddingTop: \"0em\", marginTop: \"0em\", height: \"90vh\" };\nconst leftColumnStyle = {\n  paddingLeft: \"2em\",\n  paddingRight: \"1em\",\n  paddingTop: \"0\",\n  borderRight: \"2px solid white\",\n  height: \"100vh\",\n};\n\nconst propTypes = {\n  /** an Array indicating which fields in table should be used in the fulltext search */\n  searchOn: PropTypes.array.isRequired,\n  /** an object that conveys which fields in the table are shown in the DataList */\n  layout: PropTypes.array.isRequired,\n  /** the name of the table in the indexedDB */\n  table: PropTypes.string.isRequired,\n  /** the field in the table that is used in the wordcloud. Can also be a multientry index (e.g., an indexed array of words in indexedDB) */\n  cloudKey: PropTypes.string.isRequired,\n};\n\n/**\n * Renders a dashboard page with components for browsing and visualizing history data\n */\nconst GoodiesDashboard = ({ searchOn, layout, table, cloudKey }) => {\n  const history = useHistory();\n\n  const [loading, setLoading] = useState(false);\n\n  // The selection states are arrays of row ids\n  // the intersection of these arrays is used to combine selections\n  // this is ok-ish fast, since the id indices are ordered; see intersect function\n  // but i'm sure there are better solutions\n  const [selection, setSelection] = useState(null);\n  const [querySelection, setQuerySelection] = useState(null);\n\n  // for the key and time selections we need both in and out selections\n  // the in selection is the combined selection of other filters\n  // the out selection is the selection based on the filter itself\n  // (this way the out selection does not need to be updated if the in selection changes,\n  //  and visualizations like word clouds also need to show the non-selected items)\n  const [keyInSelection, setKeyInSelection] = useState(null);\n  const [keyOutSelection, setKeyOutSelection] = useState(null);\n  const [timeInSelection, setTimeInSelection] = useState(null);\n  const [timeOutSelection, setTimeOutSelection] = useState(null);\n\n  useEffect(() => {\n    console.log(keyOutSelection);\n    console.log(timeOutSelection);\n    console.log(intersect([querySelection, keyOutSelection, timeOutSelection]));\n    setSelection(intersect([querySelection, keyOutSelection, timeOutSelection]));\n  }, [querySelection, keyOutSelection, timeOutSelection]);\n\n  useEffect(() => {\n    setKeyInSelection(intersect([querySelection, timeOutSelection]));\n  }, [querySelection, timeOutSelection]);\n\n  useEffect(() => {\n    setTimeInSelection(intersect([querySelection, keyOutSelection]));\n  }, [querySelection, keyOutSelection]);\n\n  return (\n    <ColoredBackgroundGrid color={\"#000000b0\"}>\n      <Grid divided={\"vertically\"} style={gridStyle}>\n        <Grid.Row columns={1} style={{ paddingBottom: \"0\", paddingRight: \"0\" }} textAlign=\"right\">\n          <Grid.Column style={{ padding: \"0\", paddingLeft: \"1em\", paddingRight: \"1em\" }}>\n              <Button.Group floated=\"right\">\n                <Button\n                  style={{ background: \"#ffffff\", margin: \"0\", marginTop: \"0.5em\" }}\n                  onClick={() => history.push(\"/datasquare\")}\n                >\n                  <Icon name=\"backward\" />\n                  Go back\n                </Button>\n              </Button.Group>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <TimeLine\n              table={table}\n              field={\"date\"}\n              inSelection={timeInSelection}\n              loading={loading}\n              setOutSelection={setTimeOutSelection}\n          />\n          </Grid.Row>\n          <Grid.Row columns={2}>\n            <FunFacts\n              selection={selection}\n              loading={loading}\n            />\n          </Grid.Row>\n      </Grid>\n    </ColoredBackgroundGrid>\n  );\n};\n\nGoodiesDashboard.propTypes = propTypes;\nexport default GoodiesDashboard;\n","import React from \"react\";\nimport GoodiesDashboard from \"./dashboards/GoodiesDashboard\";\n\nconst SEARCHON = [\"url\", \"title\"];\n\nconst LAYOUT = {\n  url: { type: \"header\", style: { color: \"white\" } },\n  title: { type: \"description\", style: { color: \"white\" } },\n  date: { type: \"meta\", style: { color: \"white\", fontStyle: \"italic\" } },\n};\n\n/**\n * Renders a HistoryDashboard for the browsing history data.\n * Note that this component is reached via the react router.\n * When the card on the home page is clicked, it navigates to /browsinghistory\n */\nconst GoodiesView = () => {\n  return (\n    <GoodiesDashboard\n      searchOn={SEARCHON}\n      layout={LAYOUT}\n      table={\"browsinghistory\"}\n      cloudKey={\"domain\"}\n    />\n  );\n};\n\nexport default GoodiesView;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport HeaderMenu from \"./components/routing/HeaderMenu\";\nimport \"./App.css\";\n\n// login and authenticated route\nimport Welcome from \"./components/routing/Welcome\";\nimport AuthRoute from \"./components/routing/AuthRoute\";\n\n// Main pages. Use below in items to include in header menu\nimport DataSquare from \"./components/home/DataSquare\";\nimport BrowsingHistory from \"./components/explore/BrowsingHistory\";\nimport YoutubeHistory from \"./components/explore/YoutubeHistory\";\nimport SearchHistory from \"./components/explore/SearchHistory\";\nimport GoodiesView from \"./components/explore/GoodiesView\";\n\n// Change to add new components to the header\n// The first item will be the opening page after login\nconst items = [\n  { label: \"Data square\", path: \"/datasquare\", Component: DataSquare },\n  { label: \"Browsing History\", path: \"/browsinghistory\", Component: BrowsingHistory },\n  { label: \"Search\", path: \"/searchhistory\", Component: SearchHistory },\n  { label: \"Youtube\", path: \"/youtube\", Component: YoutubeHistory },\n  { label: \"Goodies\", path: \"/goodies\", Component: GoodiesView },\n];\n\nconst App = () => {\n  const createNavigation = (items) => {\n    return items.map((item) => {\n      return <AuthRoute key={item.path} path={item.path} Component={item.Component} />;\n    });\n  };\n\n  return (\n    <div style={{ background: \"#0C1D35\", height: \"100%\" }}>\n      <BrowserRouter>\n        <HeaderMenu items={items}>\n          <Switch>\n            <Route exact path={\"/\"} render={() => <Welcome items={items} />} />\n            {createNavigation(items)}\n          </Switch>\n        </HeaderMenu>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\n\nconst dataStatus = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_DATA_STATUS\":\n      // set whole status array\n      return action.dataStatus;\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  dataStatus,\n});\n\nexport default rootReducer;\n","import \"semantic-ui-css/semantic.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}